#!/bin/sh
. /lib/functions.sh

CONF="timecontrol"
TIMECONTROL_ENABLE=0
IsUpdate=0
FW4=$(command -v fw4 2>/dev/null)
FW3_IP6=$(command -v ip6tables 2>/dev/null)
PIDFILE="/var/run/timecontrol.pid"
SLEEPTIME=60

interface=$(
	. /lib/functions/network.sh

	network_is_up "lan" && network_get_device device "lan"
	echo "${device:-br-lan}"
)

iptables_w() {
	iptables -w 1 "$@" >/dev/null 2>&1
	[ -n "$FW3_IP6" ] && ip6tables -w 1 "$@" >/dev/null 2>&1
}

config_n_get() {
	local ret=$(uci -q get "${1}.${2}.${3}")
	echo "${ret:=$4}"
}

convert_timeToUTC() {
	local input_time="$1"
	local current_time=$(date +%Y-%m-%d)
	local system_timezone=$(config_n_get "system" "@system[-1]" "timezone" "UTC")
	local timestamp=$(TZ=$system_timezone date -d "$current_time $input_time" +%s 2>/dev/null)
	local utc_time=$(TZ=UTC date -d @$timestamp +%H:%M:%S)
	echo $utc_time
}

get_UTC_timerange() {
	start_time=$(echo "$1" | awk -F '-' '{print $1}')
	end_time=$(echo "$1" | awk -F '-' '{print $2}')
	start_utctime=$(convert_timeToUTC "$start_time")
	end_utctime=$(convert_timeToUTC "$end_time")

	if [ "$(date -d "$end_utctime" +%s)" -lt "$(date -d "$start_utctime" +%s)" ]; then
		if [ "$end_utctime" == "00:00:00" ]; then
			echo \"${start_utctime}\"-\"23:59:59\"
		else
			echo \"${start_utctime}\"-\"23:59:59\",\"00:00:00\"-\"${end_utctime}\"
		fi
	else
		echo \"${start_utctime}\"-\"${end_utctime}\"
	fi
}

load_config() {
	config_load "$CONF"
	TIMECONTROL_ENABLE=$(config_n_get "$CONF" "config" "enable" 0)

	if [ $TIMECONTROL_ENABLE -ne 1 ]; then
		logger -t timecontrol "timecontrol is disabled, exiting."
		exit 0
	fi
}

add_controlRules() {
	local enable=$(config_n_get "$CONF" "$1" "enable" 0)
	local macaddrlist=$(config_n_get "$CONF" "$1" "macaddrlist")
	local timerangelist=$(config_n_get "$CONF" "$1" "timerangelist" "00:00:00-23:59:59")
	local weekdays=$(config_n_get "$CONF" "$1" "weekdays" "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday")
	local unblockDuration=$(config_n_get "$CONF" "$1" "unblockDuration" 0)

	if [ $enable -ne 1 ] || [ $unblockDuration -gt 0 ]; then
		return 0
	fi

	weekdays=$(echo "$weekdays" | sed 's/ /,/g')

	if [ -z "$FW4" ]; then
		local chain target
		for timerange in $timerangelist; do
			timeon=$(echo "$timerange" | awk -F '-' '{print $1}')
			timeoff=$(echo "$timerange" | awk -F '-' '{print $2}')

			for table in filter nat; do
				case $table in
				filter)
					chain="timecontrol_forward_reject"
					target="reject"
					;;
				nat)
					chain="timecontrol_dstnat_accept"
					target="ACCEPT"
					;;
				*) ;;
				esac

				if [ -z "${macaddrlist}" ]; then
					iptables_w -t $table -A $chain -m time --kerneltz --timestart $timeon --timestop $timeoff --weekdays "$weekdays" -j $target -m comment --comment "!fw3: Time control"
				else
					for macaddr in $macaddrlist; do
						iptables_w -t $table -A $chain -m mac --mac-source $macaddr -m time --kerneltz --timestart $timeon --timestop $timeoff --weekdays "$weekdays" -j $target -m comment --comment "!fw3: Time control"
					done
				fi
			done
		done
	else
		local ether_saddr_param macaddr
		if [ -n "$macaddrlist" ]; then
			macaddr=$(echo $macaddrlist | sed 's/ /,/g')
			ether_saddr_param="ether saddr { ${macaddr} } "
		fi

		local meta_hour_param timeranges
		if [ -z $(echo $timerange | grep -q "00:00:00-23:59:59") ]; then
			timeranges="$timerangelist"
		fi
		if [ -n "$timeranges" ]; then
			local utc_timeranges
			for timerange in $timeranges; do
				if [ -z "$utc_timeranges" ]; then
					utc_timeranges="$(get_UTC_timerange "$timerange")"
				else
					utc_timeranges="${utc_timeranges},$(get_UTC_timerange "$timerange")"
				fi
			done
			meta_hour_param="meta hour { ${utc_timeranges} } "
		fi

		local meta_day_param days
		if [ "$weekdays" != "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday" ]; then
			days="$weekdays"
		fi
		if [ -n "$days" ]; then
			meta_day_param="meta day { ${days} } "
		fi

		TZ=UTC nft "add rule inet fw4 timecontrol_forward_reject ${ether_saddr_param} ${meta_hour_param} ${meta_day_param} counter jump handle_reject comment \"!fw4: Time control\""
		TZ=UTC nft "add rule inet fw4 timecontrol_dstnat_accept ${ether_saddr_param} ${meta_hour_param} ${meta_day_param} counter accept comment \"!fw4: Time control\""
	fi

	logger -t timecontrol "Added timecontrol rule (MAC: ${macaddrlist}, Time: ${timerangelist}, Weekdays: ${weekdays})"

	if [ -n "$(command -v conntrack 2>/dev/null)" ]; then
		regex=$(echo ${macaddrlist} | sed 's/ /|/g')
		ipaddr_list=$(ip neigh | grep -i -E "${regex}" | awk '{print $1}')

		for ipaddr in $ipaddr_list; do
			conntrack -D --orig-src "$ipaddr" >/dev/null 2>&1
		done
		logger -t timecontrol "Deleted conntrack entries for IPs: ${ipaddr_list}"
	fi
}

Initialize() {
	logger -t timecontrol ""$1"ing timecontrol"
	load_config

	if [ -z "$FW4" ]; then
		set_iptablesChains
		set_iptablesRules
	else
		set_nftablesChains
		set_nftablesRules
	fi

	config_foreach add_controlRules rule
	logger -t timecontrol "timecontrol "$1"ed"
}

set_nftablesChains() {
	if nft list chain inet fw4 timecontrol_forward_reject >/dev/null 2>&1; then
		nft flush chain inet fw4 timecontrol_forward_reject
	else
		nft add chain inet fw4 timecontrol_forward_reject
	fi

	if nft list chain inet fw4 timecontrol_dstnat_accept >/dev/null 2>&1; then
		nft flush chain inet fw4 timecontrol_dstnat_accept
	else
		nft add chain inet fw4 timecontrol_dstnat_accept
	fi
}

set_nftablesRules() {

	for chain in forward dstnat; do
		local jumpChain
		case $chain in
		forward)
			jumpChain="timecontrol_forward_reject"
			;;
		dstnat)
			jumpChain="timecontrol_dstnat_accept"
			;;
		*) ;;
		esac

		first_rule=$(nft list chain inet fw4 $chain | sed -n '4p' | grep -E "$jumpChain")
		if [ -z "$first_rule" ]; then
			handles=$(nft -a list chain inet fw4 $chain | grep "$jumpChain" | awk '{print $NF}')
			for handle in $handles; do
				nft delete rule inet fw4 $chain handle $handle 2>/dev/null
			done
			nft "insert rule inet fw4 $chain iifname \"${interface}\" counter jump "$jumpChain" comment \"!fw4: Time control\" " 2>/dev/null
			logger -t timecontrol "set timecontrol rule position to first (chain: $chain)"
		fi
	done
}

set_iptablesChains() {
	local jumpChain
	for table in filter nat; do
		case $table in
		filter)
			jumpChain="timecontrol_forward_reject"
			;;
		nat)
			jumpChain="timecontrol_dstnat_accept"
			;;
		*) ;;
		esac
		for ipt in iptables ip6tables; do
			case $ipt in
			ip6tables)
				if [ -z "$FW3_IP6" ]; then
					continue
				fi
				;;
			*) ;;
			esac

			if $ipt -w 1 -t $table -L $jumpChain >/dev/null 2>&1; then
				$ipt -w 1 -t $table -F $jumpChain
			else
				$ipt -w 1 -t $table -N $jumpChain
				$ipt -w 1 -t $table -F $jumpChain
			fi
		done
	done
}
set_iptablesRules() {
	local chain jumpChain
	for table in filter nat; do
		case $table in
		filter)
			chain="FORWARD"
			jumpChain="timecontrol_forward_reject"
			;;
		nat)
			chain="PREROUTING"
			jumpChain="timecontrol_dstnat_accept"
			;;
		*) ;;
		esac
		for ipt in iptables ip6tables; do
			case $ipt in
			ip6tables)
				if [ -z "$FW3_IP6" ]; then
					continue
				fi
				;;
			*) ;;
			esac

			first_rule=$($ipt -w 1 -t $table -S $chain | sed -n '2p')
			echo "$first_rule" | grep -q $jumpChain
			if [ $? -ne 0 ]; then
				while $ipt -w 1 -t $table -C $chain -i $interface -j $jumpChain 2>/dev/null; do
					$ipt -w 1 -t $table -D $chain -i $interface -j $jumpChain 2>/dev/null
				done
				$ipt -w 1 -t $table -I $chain -i $interface -j $jumpChain 2>/dev/null
				logger -t timecontrol "set timecontrol rule position to first (cmd: $ipt, table: $table, chain: $chain)"
			fi
		done
	done
}

update_ruleUnblockDuration() {
	local enable=$(config_n_get "$CONF" "$1" "enable" 0)
	local macaddrlist=$(config_n_get "$CONF" "$1" "macaddrlist")
	local timerangelist=$(config_n_get "$CONF" "$1" "timerangelist" "00:00:00-23:59:59")
	local weekdays=$(config_n_get "$CONF" "$1" "weekdays" "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday")
	local unblockDuration=$(config_n_get "$CONF" "$1" "unblockDuration" 0)

	if [ $unblockDuration -le 0 ]; then
		return
	fi

	weekdays=$(echo "$weekdays" | sed 's/ /,/g')

	unblockDuration=$(expr $unblockDuration - 1)

	if [ $unblockDuration -eq 0 ]; then
		IsUpdate=1
		uci -q delete timecontrol.$1.unblockDuration
	else
		uci -q set timecontrol.$1.unblockDuration=$unblockDuration
	fi
	uci -q commit timecontrol

	logger -t timecontrol "Update timecontrol rule's unblock duration to $unblockDuration (MAC: ${macaddrlist}, Time: ${timerangelist}, Days: ${weekdays}) "
}

update_unblockDuration() {
	IsUpdate=0

	load_config
	config_foreach update_ruleUnblockDuration rule

	if [ $IsUpdate -eq 1 ]; then
		Initialize flush
	fi
}

check_firstRule() {
	if [ -z "$FW4" ]; then
		set_iptablesRules
	else
		set_nftablesRules
	fi
}

reset_sleep_time() {
	SLEEPTIME=60
	logger -t timecontrol "reset sleep time"
}

cleanup() {
	if [ -f "$PIDFILE" ]; then
		rm -f "$PIDFILE" >/dev/null 2>&1
	fi
	trap - USR1 EXIT
	logger -t timecontrol "timecontrol cleanup done"
}

start() {
	if [ -f "$PIDFILE" ]; then
		pid=$(cat "$PIDFILE" 2>/dev/null)
		if [ -n "$pid" ] && ! kill -0 "$pid" 2>/dev/null; then
			rm -f "$PIDFILE" >/dev/null 2>&1
		fi
		if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null && [ "$pid" -ne $$ ]; then
			logger -t timecontrol "timecontrol is already running"
			echo "timecontrol is already running"
			return 0
		fi
	fi

	echo $$ >"$PIDFILE"
	trap reset_sleep_time USR1
	trap cleanup EXIT

	Initialize start
	while true; do
		while [ $SLEEPTIME -gt 0 ]; do
			sleep 3
			SLEEPTIME=$(expr $SLEEPTIME - 3)
		done
		SLEEPTIME=60
		update_unblockDuration
		check_firstRule
	done
}

stop() {
	logger -t timecontrol "Stopping timecontrol"

	if [ -z "$FW4" ]; then
		local chain jumpChain
		for table in filter nat; do
			case $table in
			filter)
				chain="FORWARD"
				jumpChain="timecontrol_forward_reject"
				;;
			nat)
				chain="PREROUTING"
				jumpChain="timecontrol_dstnat_accept"
				;;
			*) ;;
			esac
			for ipt in iptables ip6tables; do
				while $ipt -w 1 -t $table -C $chain -i $interface -j $jumpChain 2>/dev/null; do
					$ipt -w 1 -t $table -D $chain -i $interface -j $jumpChain 2>/dev/null
				done
			done
			iptables_w -t $table -F $jumpChain
			iptables_w -t $table -X $jumpChain
		done
	else
		for chain in forward dstnat; do
			local jumpChain
			case $chain in
			forward)
				jumpChain="timecontrol_forward_reject"
				;;
			dstnat)
				jumpChain="timecontrol_dstnat_accept"
				;;
			*) ;;
			esac
			rule_handles=$(nft -a list chain inet fw4 $chain | grep "$jumpChain" | awk '{print $NF}')
			for handle in $rule_handles; do
				nft delete rule inet fw4 $chain handle $handle >/dev/null 2>&1
			done
		done
		nft delete chain inet fw4 timecontrol_forward_reject >/dev/null 2>&1
		nft delete chain inet fw4 timecontrol_dstnat_accept >/dev/null 2>&1
	fi
	logger -t timecontrol "timecontrol stopped"
}

case "$1" in
stop)
	stop
	;;
flush)
	if [ -f "$PIDFILE" ]; then
		pid=$(cat "$PIDFILE" 2>/dev/null)
		if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null; then
			kill -USR1 "$pid" 2>/dev/null
		fi
	fi
	Initialize flush
	;;
*)
	start
	;;
esac
